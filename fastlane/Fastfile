# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.111.0"

default_platform :ios

platform :ios do
  before_all do
 # ensure_git_status_clean
 ensure_git_branch(
  branch: 'dev'
)


   #执行此句增加最小的单位，0.7.0 会变成0.7.1 对于cordova 项目一般不需要，因为执行gulp build  自动生成已经配置的项目了。
   # increment_version_number
  #  increment_version_number(
  #    bump_type: "patch" # Automatically increment patch version number
  # )
  #  increment_version_number(
  # bump_type: "minor" # Automatically increment minor version number
  # )
  #  increment_version_number(
  # bump_type: "major" # Automatically increment major version number
  # )
  #  increment_version_number(
  # version_number: "2.1.1" # Set a specific version number
  # )

# appium 很好玩的功能待研究
  # appium(
  # app_path:  "appium/apps/TargetApp.app",
  # spec_path: "appium/spec",
  # platform:  "iOS",
  # caps: {
  #   versionNumber: "9.1",
  #   deviceName:    "iPhone 6"
  # }
  # )

  end

  desc "Runs all the tests"
  lane :test do
    #执行scan 会自动安装app 到模拟器，运行Xcode 的测试项目 并生成JUnit 报告。
    # scan
     # ensure_git_status_clean
  #  increment_version_number(
  #    bump_type: "patch" # Automatically increment patch version number
  # )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    gym # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  lane :buildIPA do

# 有options 参数 一直不明白options 怎么来的原来需要外面传入。
#     fastlane buildIPA project:GMUtil version:0.1.4


    #不推荐用cert 以及sigh ，苹果服务器会返回 错误。
    #不需要将git_url 换成证书路径，因为会提示没有权限，只要设了.git 系统自动会it clone 证书
    #企业版或者appstore 版 ，需要将type  换成 enterprise 和 appstore 当然只自己用的话可以换成development

     match(
      git_url: "https://github.com/geasscode/CIProject.git",
      app_identifier: "com.geass.CIProject",
      username:"geasscode@outlook.com",
      type: "adhoc",
      git_branch:"dev",
      skip_docs:true,
      force_for_new_devices:true,
      force:false,
      readonly:true
      )

    build_name = "CIProject_v#{get_version_number}"

    gym(
      configuration: "Release",
      scheme: "CIProject",
      include_bitcode: false,
      silent: true,
      clean: true,
      output_directory: "~/Documents/buildIPA/",
      output_name: "#{build_name}.ipa",
      # export_method:"ad-hoc,enterprise,appstore,development"
      # include_symbols: true,
      # sdk: "iphoneos10.1",
      # export_method:"ad-hoc,enterprise,appstore,development"

      export_method:"ad-hoc",
      #使用match 下载好的证书千万不要再用 use_legacy_build_api 否则生成的ipa 打开会crash，google都没用。只能靠自己解决。
      #use_legacy_build_api: true
      )
  end


  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    # # Build your app - more options available
    #deliver(force: true)
    # frameit

    buildIPA
  end

  # You can define as many lanes as you want

  after_all do |lane|
# 由于修改了版本号，所以需要将代码Commit和Push一下
  # Make sure our directory is clean, except for changes Fastlane has made
   clean_build_artifacts
    # git_commit(path: ["./version.txt", "./changelog.txt"], message: "Version Bump")
 # Increment build number to current date
  build_number = Time.new.strftime("%Y.%m.%d")

  increment_build_number(
    build_number: build_number
  )

    # sh("git commit -a -m 'Deploying version #{get_version_number}'").strip
  commit_version_bump message: "Deploying version #{get_version_number}."

    # git_commit(message: "Version Bump")


    push_to_git_remote(
  remote: "origin",         # optional, default: "origin"
  local_branch: "dev",  # optional, aliased by "branch", default: "master"
  remote_branch: "dev", # optional, default is set to local_branch
  force: true,    # optional, default: false
  tags: false     # optional, default: true
  )
   ship_it

   notification(subtitle: "Finished Building", message: "Ready to upload...")

  end

  error do |lane, exception|
      notification(subtitle: "errored", message: "Fastlane '#{lane}' errored")

  end
end


def change_log_since_last_tag
    # http://git-scm.com/docs/pretty-formats
    # <short hash> <commit title>
    return changelog_from_git_commits(pretty: '%h %s')
end

def next_version
  Time.now.strftime("%Y%m%d%H%M")
end

def get_DisplayName
  `/usr/libexec/PlistBuddy -c 'Print CFBundleDisplayName' ../CIProject/Info.plist`.strip
end

def compare_url
  last_bump_hash = sh("git log --pretty=format:'%s %h' | grep -i '^version bump [0-9]\\{12\\}\\b' | awk '{print $NF}' | head -n1").strip
  current_hash = sh("git rev-parse HEAD").strip

  "https://github.com/timehop/TimehopThree-iOS/compare/#{last_bump_hash}...#{current_hash}"
end

 def tag_name(build_type, version_number, build_number)
    "#{build_type}/#{version_number}/#{build_number}"
end


def ship_it
  rand = Random.rand(0..1)
  if rand == 0
    squirrel
  elsif rand == 1
    boat
  end
end

def squirrel
  puts "
    !!!!
  !!!!!!!!
!!!!!!!!!!!   O_O
!!!  !!!!!!! /@ @\\
      !!!!!! \\ x /
      !!!!!!/ m  !m
       !!!!/ __  |
       !!!!|/  \\__
        !!!\\______\\
  "
end

def boat
  puts "
     .  o ..
     o . o o.o
          ...oo
            __[]__
         __|_o_o_o\__
         \\\"\"\"\"\"\"\"\"\"\"/
          \\. ..  . /
     ^^^^^^^^^^^^^^^^^^^^
  "
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
